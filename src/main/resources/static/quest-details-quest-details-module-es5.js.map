{"version":3,"sources":["src/app/modules/quest-details/components/embed/finish-action-popup.component.html","src/app/modules/quest-details/components/embed/hint-popup.component.html","src/app/modules/quest-details/components/qd-answer.component.html","src/app/modules/quest-details/components/qd-question.component.html","src/app/modules/quest-details/quest-details.component.html","src/app/modules/quest-details/components/embed/finish-action-popup.component.ts","src/app/modules/quest-details/components/embed/hint-popup.component.ts","src/app/modules/quest-details/components/qd-answer.component.ts","src/app/modules/quest-details/components/qd-question.component.ts","src/app/modules/quest-details/quest-details.component.ts","src/app/modules/quest-details/quest-details.module.ts","src/app/modules/quest-details/services/qd-navigation-helper.service.ts","src/app/modules/quest-details/services/quest-details.service.ts","src/app/modules/quest-details/services/quest-task.resolver.ts","src/app/modules/quest-details/types/actions-popup-result.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,ywBAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,0aAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,+zEAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,w2BAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,2oBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,6BAAb,GASI,uCAAqC,qBAArC,EAAmE;AAAA;;AAP5D,WAAA,mBAAA,GAAsB,wDAAA,CAAA,uBAAA,CAAtB;AAKC,WAAA,SAAA,GAAqB,IAArB;AAGJ,WAAK,YAAL,GAAoB,CAAC,qBAArB;AACH,KAXL;;;;;;gBASiB,0CAAA,CAAA,QAAA,C;AAAM,UAAA,IAAA,EAAA,CAAC,8CAAA,CAAA,iBAAA,CAAD;;;;;AAFnB,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,aAAA,CAAA,CAAA,CAAY,+BAAZ,CACD,E,wEAAA,CAAA,E,uCAAA,E,WAAA,E,KAAkC,CAAlC;AAPS,IAAA,6BAA6B,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJzC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,yBADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,iIAAA,CAAA;AAFO,KAAV,CAIyC,EASzB,kCAAA,CAAA,SAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,0CAAA,CAAA,QAAA,CAAA,CAAA,CAAO,8CAAA,CAAA,iBAAA,CAAP,CAAA,CATyB,E,gFAAA,CAAA,EAA7B,6BAA6B,CAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDb,QAAa,qBAAb,GAOI,+BAAqC,IAArC,EAAiD;AAAA;;AAL1C,WAAA,KAAA,GAAgB,EAAhB;AAGC,WAAA,SAAA,GAAqB,IAArB;AAGJ,WAAK,KAAL,GAAa,IAAb;AACH,KATL;;;;;;gBAOiB,0CAAA,CAAA,QAAA,C;AAAM,UAAA,IAAA,EAAA,CAAC,8CAAA,CAAA,iBAAA,CAAD;;;;;AAFnB,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,aAAA,CAAA,CAAA,CAAY,sBAAZ,CACD,E,wEAAA,CAAA,E,+BAAA,E,WAAA,E,KAAkC,CAAlC;AALS,IAAA,qBAAqB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJjC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,gBADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,wHAAA,CAAA;AAFO,KAAV,CAIiC,EAOjB,kCAAA,CAAA,SAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,0CAAA,CAAA,QAAA,CAAA,CAAA,CAAO,8CAAA,CAAA,iBAAA,CAAP,CAAA,CAPiB,E,+EAAA,CAAA,EAArB,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYb,QAAa,8BAAb;AAgCI,8CAAoB,aAApB,EACoB,mBADpB,EAEoB,iBAFpB,EAEuE;AAAA;;AAFnD,aAAA,aAAA,GAAA,aAAA;AACA,aAAA,mBAAA,GAAA,mBAAA;AACA,aAAA,iBAAA,GAAA,iBAAA;AAhCb,aAAA,UAAA,GAAsB,KAAtB;AAEA,aAAA,cAAA,GAA0B,KAA1B;AAEA,aAAA,cAAA,GAAiB,CACpB;AACI,UAAA,YAAY,EAAE;AADlB,SADoB,EAIpB;AACI,UAAA,YAAY,EAAE;AADlB,SAJoB,EAOpB;AACI,UAAA,YAAY,EAAE;AADlB,SAPoB,CAAjB;AAYA,aAAA,aAAA,GAAyB,KAAzB;AAIA,aAAA,aAAA,GAA2B,EAA3B;AAKC,aAAA,UAAA,GAAiB,EAAjB;AAGA,aAAA,SAAA,GAAqB,IAArB;AAKP;;AAnCL;AAAA;AAAA,oCAqCuB,OArCvB,EAqC6C;AACrC,cAAI,OAAO,CAAC,WAAD,CAAX,EAA0B;AACtB,iBAAK,cAAL;AACA,iBAAK,2BAAL;AACH;AACJ;AA1CL;AAAA;AAAA,4BA4CY;AACJ,eAAK,cAAL;AACA,eAAK,2BAAL;AACH;AA/CL;AAAA;AAAA,uCAiD0B,MAjD1B,EAiDwC;AAChC,eAAK,sBAAL,CAA4B,MAA5B;AACH;AAnDL;AAAA;AAAA,sCAqDyB,KArDzB,EAqDsC;AAC9B,cAAI,CAAC,KAAK,aAAL,CAAmB,KAAnB,CAAL,EAAgC;AAC5B,iBAAK,aAAL,CAAmB,KAAnB,IAA4B,IAA5B;AACA,iBAAK,eAAL,CAAqB,KAArB;AACH;AACJ;AA1DL;AAAA;AAAA,+CA4DkC,KA5DlC,EA4DiD,OA5DjD,EA4DwD;AAChD,iBAAO,KAAK,KAAL,GAAa,OAAO,CAAC,YAAR,CAAqB,QAArB,EAApB;AACH;AA9DL;AAAA;AAAA,sCAgEsB,CACd;AACH;AAlEL;AAAA;AAAA,yCAoE0B;AAClB,eAAK,qBAAL,GAA6B,IAAI,2CAAA,CAAA,WAAA,CAAJ,CAAc;AACvC,YAAA,WAAW,EAAE,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,GAAX,CAAe,CAAf,CAAtB,CAApB;AAD0B,WAAd,CAA7B;AAGH;AAxEL;AAAA;AAAA,sDA0EuC;AAAA;;AAC/B,eAAK,mBAAL,CAAyB,yBAAzB,CAAmD,KAAK,SAAL,CAAe,IAAlE,EACK,IADL,CAEQ,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAK,CAAL,CAFR,EAGQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAA,KAAK,EAAG;AACR,YAAA,KAAI,CAAC,aAAL,GAAqB,IAAI,KAAJ,CAAU,KAAV,EAAiB,IAAjB,CAAsB,KAAtB,CAArB;AACH,WAFD,CAHR,EAOK,SAPL;AAQH;AAnFL;AAAA;AAAA,8CAqF+B;AACvB,eAAK,cAAL,CAAoB,GAApB;;AACA,eAAK,cAAL,CAAoB,OAApB,CAA4B;AACxB,YAAA,YAAY,EAAE;AADU,WAA5B;AAGH;AA1FL;AAAA;AAAA,+CA4FmC,MA5FnC,EA4FiD;AAAA;;AACzC,eAAK,aAAL,GAAqB,IAArB;AACA,eAAK,mBAAL,CAAyB,cAAzB,CAAwC,KAAK,SAAL,CAAe,IAAvD,EAA6D,MAA7D,EACK,IADL,CAEQ,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAK,CAAL,CAFR,EAGQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAA,QAAQ,EAAG;AACX,YAAA,MAAI,CAAC,cAAL,GAAsB,CAAC,QAAQ,CAAC,QAAhC;;AACA,gBAAI,MAAI,CAAC,cAAT,EAAyB;AACrB,cAAA,MAAI,CAAC,mBAAL;;AACA,cAAA,MAAI,CAAC,kBAAL;AACH,aAHD,MAGO;AACH,cAAA,MAAI,CAAC,UAAL,GAAkB,QAAQ,CAAC,aAA3B;;AACA,cAAA,MAAI,CAAC,UAAL;;AACA,cAAA,MAAI,CAAC,mCAAL,CAAyC,CAAC,QAAQ,CAAC,WAAV,IAAyB,CAAC,CAAC,QAAQ,CAAC,aAA7E;AACH;AACJ,WAVD,CAHR,EAcQ,MAAA,CAAA,2CAAA,CAAA,UAAA,CAAA,CAAA,CAAS,YAAK;AACV,YAAA,MAAI,CAAC,aAAL,GAAqB,KAArB;AACH,WAFD,CAdR,EAkBK,SAlBL;AAmBH;AAjHL;AAAA;AAAA,6CAmH8B;AACtB,eAAK,qBAAL,CAA2B,QAA3B,CAAoC,aAApC,EAAmD,SAAnD,qBAAgE,aAAhE,EAAgF,iBAAhF;AACH;AArHL;AAAA;AAAA,qCAuHsB;AACd,eAAK,qBAAL,CAA2B,UAA3B,CAAsC;AAClC,YAAA,WAAW,EAAE;AADqB,WAAtC,EAEG;AACC,YAAA,SAAS,EAAE;AADZ,WAFH;AAKH;AA7HL;AAAA;AAAA,4DA+HgD,OA/HhD,EA+HgE;AAAA;;AACxD,eAAK,aAAL,CAAmB,IAAnB,CAAuF,iEAAA,CAAA,+BAAA,CAAvF,EAAsH;AAClH,YAAA,IAAI,EAAE;AAD4G,WAAtH,EAGK,WAHL,GAIK,IAJL,CAKQ,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAK,CAAL,CALR,EAMQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAA,MAAM;AAAA,mBAAI,MAAI,CAAC,uBAAL,CAA6B,MAA7B,CAAJ;AAAA,WAAV,CANR,EAQK,SARL;AASH;AAzIL;AAAA;AAAA,wCA2I4B,GA3I5B,EA2IuC;AAAA;;AAC/B,eAAK,mBAAL,CAAyB,oBAAzB,CAA8C,KAAK,SAAL,CAAe,IAA7D,EAAmE,GAAG,GAAG,CAAzE,EACK,IADL,CAEQ,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAK,CAAL,CAFR,EAGQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAA,KAAK,EAAG;AACR,YAAA,MAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,wDAAA,CAAA,uBAAA,CAAxB,EAA+C;AAAE,cAAA,IAAI,EAAE,KAAK,CAAC;AAAd,aAA/C;AACH,WAFD,CAHR,EAOK,SAPL;AAQH;AApJL;AAAA;AAAA,gDAsJoC,MAtJpC,EAsJiE;AACzD,kBAAQ,MAAR;AACI,iBAAK,wDAAA,CAAA,uBAAA,CAAA,CAAsB,IAA3B;AACI,mBAAK,iBAAL,CAAuB,mBAAvB;AACA;;AACJ,iBAAK,wDAAA,CAAA,uBAAA,CAAA,CAAsB,IAA3B;AACI,mBAAK,UAAL,GACM,KAAK,iBAAL,CAAuB,0BAAvB,CAAkD,KAAK,UAAvD,CADN,GAEM,KAAK,iBAAL,CAAuB,mBAAvB,EAFN;AAGA;;AACJ;AACI,oBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AAVR;AAYH;AAnKL;;AAAA;AAAA,OAAA;;;;cAgCuC,8CAAA,CAAA,WAAA;;cACM,4DAAA,CAAA,wBAAA;;cACF,mEAAA,CAAA,kCAAA;;;;AATvC,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,OAAA,CAAA,CAAA,EACD,E,uEAAA,CAAA,E,wCAAA,E,WAAA,E,KAA+B,CAA/B;AAKA,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,aAAA,CAAA,CAAA,CAAY,qBAAZ,CACD,E,wEAAA,CAAA,E,wCAAA,E,WAAA,E,KAAkC,CAAlC;AA9BS,IAAA,8BAA8B,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAP1C,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,eADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,iHAAA,CAAA,YAFO;AAGP,MAAA,SAAS,EAAE,CACP,8CAAA,CAAA,WAAA,CADO;AAHJ,KAAV,CAO0C,E,uEAgCJ,8CAAA,CAAA,WAAA,C,EACM,4DAAA,CAAA,wBAAA,C,EACF,mEAAA,CAAA,kCAAA,C,EAlCA,CAAA,EAA9B,8BAA8B,CAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdb,QAAY,mBAAZ;;AAAA,KAAA,UAAY,mBAAZ,EAA+B;AAC3B,MAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,MAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACH,KAHD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;AAUA,QAAa,gCAAb;AAcI,gDAAoB,mBAApB,EAA+D;AAAA;;AAA3C,aAAA,mBAAA,GAAA,mBAAA;AAVb,aAAA,aAAA,GAAgB,mBAAhB;AAQC,aAAA,SAAA,GAAqB,IAArB;AAE2D;;AAdvE;AAAA;AAAA,oCAgBuB,OAhBvB,EAgB6C;AACrC,cAAI,OAAO,CAAC,WAAD,CAAX,EAA0B;AACtB,iBAAK,WAAL;AACA,iBAAK,WAAL;AACH;AACJ;AArBL;AAAA;AAAA,sCAuBuB;AACf,eAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,GAAf,GACV,KAAK,SAAL,CAAe,GAAf,CAAmB,QAAnB,CAA4B,GAA5B,IACG,mBAAmB,CAAC,OADvB,GAEG,mBAAmB,CAAC,KAHb,GAIX,IAJN;AAKH;AA7BL;AAAA;AAAA,sCA+BuB;AACf,kBAAQ,KAAK,SAAb;AACI,iBAAK,mBAAmB,CAAC,OAAzB;AACI,mBAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,gBAAzB,CAA0C,KAAK,SAAL,CAAe,GAAzD,CAAhB;AACA;;AACJ,iBAAK,mBAAmB,CAAC,KAAzB;AACI,mBAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,gBAAzB,CAA0C,KAAK,SAAL,CAAe,GAAzD,CAAhB;AACA;AANR;AAQH;AAxCL;;AAAA;AAAA,OAAA;;;;cAc6C,4DAAA,CAAA,wBAAA;;;;AALzC,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,OAAA,CAAA,CAAA,EACD,E,uEAAA,CAAA,E,0CAAA,E,WAAA,E,KAA+B,CAA/B;AAGA,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,aAAA,CAAA,CAAA,CAAY,uBAAZ,CACD,E,wEAAA,CAAA,E,0CAAA,E,WAAA,E,KAAkC,CAAlC;AAZS,IAAA,gCAAgC,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJ5C,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,iBADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,mHAAA,CAAA;AAFO,KAAV,CAI4C,E,uEAcA,4DAAA,CAAA,wBAAA,C,EAdA,CAAA,EAAhC,gCAAgC,CAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFb,QAAa,wBAAb;AAOI,wCAAoB,KAApB,EACoB,iBADpB,EACuE;AAAA;;AADnD,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,iBAAA,GAAA,iBAAA;AAHZ,aAAA,SAAA,GAAqB,IAArB;AAIJ,aAAK,uBAAL;AACH;;AAVL;AAAA;AAAA,mCAYmB,CAAK;AAZxB;AAAA;AAAA,uCAcuB;AACf,eAAK,iBAAL,CAAuB,IAAvB;AACH;AAhBL;AAAA;AAAA,kDAkBmC;AAAA;;AAC3B,eAAK,KAAL,CAAW,IAAX,CACK,IADL,CAEQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAC,IAAD,EAAsC;AACtC,mBAAO,IAAI,CAAC,SAAZ;AACH,WAFD,CAFR,EAKQ,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA,CAAI,UAAA,IAAI,EAAG;AACP,YAAA,MAAI,CAAC,UAAL,GAAkB,IAAlB;AACH,WAFD,CALR,EASK,SATL;AAUH;AA7BL;;AAAA;AAAA,OAAA;;;;cAO+B,4CAAA,CAAA,gBAAA;;cACY,mEAAA,CAAA,kCAAA;;;;AAHvC,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,aAAA,CAAA,CAAA,CAAY,yBAAZ,CACD,E,wEAAA,CAAA,E,kCAAA,E,WAAA,E,KAAkC,CAAlC;AALS,IAAA,wBAAwB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAPpC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACP,MAAA,QAAQ,EAAE,mBADH;AAEP,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,0GAAA,CAAA,YAFO;AAGP,MAAA,SAAS,EAAE,CACP,mEAAA,CAAA,kCAAA,CADO;AAHJ,KAAV,CAOoC,E,uEAON,4CAAA,CAAA,gBAAA,C,EACY,mEAAA,CAAA,kCAAA,C,EARN,CAAA,EAAxB,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCb,QAAM,kBAAkB,GAAW,CAC/B;AACI,MAAA,IAAI,EAAE,EADV;AAEI,MAAA,SAAS,EAAE,sDAAA,CAAA,0BAAA,CAFf;AAGI,MAAA,OAAO,EAAE;AACL,QAAA,SAAS,EAAE,2DAAA,CAAA,sBAAA;AADN;AAHb,KAD+B,CAAnC;AAUA,QAAM,UAAU,GAAqB,CACjC,8CAAA,CAAA,iBAAA,CADiC,EAEjC,8CAAA,CAAA,iBAAA,CAFiC,EAGjC,8CAAA,CAAA,eAAA,CAHiC,EAIjC,8CAAA,CAAA,gBAAA,CAJiC,EAKjC,8CAAA,CAAA,kBAAA,CALiC,CAArC;;AAmCA,QAAa,qBAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,qBAAqB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CA3BjC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACN,MAAA,OAAO,GACH,4CAAA,CAAA,cAAA,CADG,EAEH,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,kBAAtB,CAFG,EAGH,2CAAA,CAAA,qBAAA,CAHG,SAIA,UAJA,CADD;AAON,MAAA,YAAY,EAAE,CACV,sDAAA,CAAA,0BAAA,CADU,EAEV,+DAAA,CAAA,kCAAA,CAFU,EAGV,4DAAA,CAAA,gCAAA,CAHU,EAIV,4EAAA,CAAA,+BAAA,CAJU,EAKV,mEAAA,CAAA,uBAAA,CALU,CAPR;AAcN,MAAA,eAAe,EAAE,CACb,4EAAA,CAAA,+BAAA,CADa,EAEb,mEAAA,CAAA,uBAAA,CAFa,CAdX;AAkBN,MAAA,OAAO,EAAE,CACL,sDAAA,CAAA,0BAAA,CADK,CAlBH;AAqBN,MAAA,SAAS,EAAE,CACP,sEAAA,CAAA,4BAAA,CADO,EAEP,6DAAA,CAAA,wBAAA,CAFO,EAGP,2DAAA,CAAA,sBAAA,CAHO;AArBL,KAAT,CA2BiC,CAAA,EAArB,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDb,QAAa,gCAAb;AAEI,gDAAoB,iBAApB,EACoB,mBADpB,EAC+D;AAAA;;AAD3C,aAAA,iBAAA,GAAA,iBAAA;AACA,aAAA,mBAAA,GAAA,mBAAA;AACnB;;AAJL;AAAA;AAAA,8CAM8B;AACtB,eAAK,iBAAL,CAAuB,UAAvB,CAAkC,yCAAA,CAAA,cAAA,CAAA,CAAa,yCAAA,CAAA,iBAAA,CAAA,CAAgB,SAA7B,CAAlC;AACH;AARL;AAAA;AAAA,mDAUsC,UAVtC,EAUoD;AAC5C,eAAK,iBAAL,CAAuB,UAAvB,CAAkC,yCAAA,CAAA,cAAA,CAAA,CAAa,yCAAA,CAAA,iBAAA,CAAA,CAAgB,SAA7B,IAA0C,GAA1C,GAAgD,UAAlF;AACH;AAZL;AAAA;AAAA,+BAce;AACP,eAAK,iBAAL,CAAuB,IAAvB;AACH;AAhBL;;AAAA;AAAA,OAAA;;;;cAE2C,yDAAA,CAAA,sBAAA;;cACE,mDAAA,CAAA,wBAAA;;;;AAHhC,IAAA,gCAAgC,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAD5C,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EAC4C,E,uEAEF,yDAAA,CAAA,sBAAA,C,EACE,mDAAA,CAAA,wBAAA,C,EAHA,CAAA,EAAhC,gCAAgC,CAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGb,QAAa,sBAAb;AAMI,sCAA2B,WAA3B,EAC2B,SAD3B,EACkD;AAAA;;AADvB,aAAA,WAAA,GAAA,WAAA;AACA,aAAA,SAAA,GAAA,SAAA;AALV,aAAA,QAAA,GAAmB,gCAAnB;AAEA,aAAA,eAAA,GAA0B,sCAA1B;AAIhB;;AARL;AAAA;AAAA,6CAUgC,MAVhC,EAU4C,GAV5C,EAUuD;AAC/C,iBAAO,KAAK,WAAL,CAAiB,oBAAjB,CAAsC;AACzC,YAAA,QAAQ,EAAE,MAD+B;AAEzC,YAAA,GAAG,EAAE;AAFoC,WAAtC,CAAP;AAIH;AAfL;AAAA;AAAA,kDAiBqC,MAjBrC,EAiB+C;AACvC,iBAAO,KAAK,WAAL,CAAiB,yBAAjB,CAA2C,MAA3C,CAAP;AACH;AAnBL;AAAA;AAAA,uCAqB0B,MArB1B,EAqBsC,MArBtC,EAqBoD;AAC5C,iBAAO,KAAK,WAAL,CAAiB,cAAjB,CAAgC;AACnC,YAAA,QAAQ,EAAE,MADyB;AAEnC,YAAA,MAAM,EAAE;AAF2B,WAAhC,CAAP;AAIH;AA1BL;AAAA;AAAA,yCA4B4B,MA5B5B,EA4BsC;AAC9B,iBAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,MAAlC,CAAP;AACH;AA9BL;AAAA;AAAA,yCAgC4B,QAhC5B,EAgCoC;AAC5B,iBAAO,KAAK,SAAL,CAAe,8BAAf,CAA8C,KAAK,YAAL,CAAkB,QAAlB,CAA9C,CAAP;AACH;AAlCL;AAAA;AAAA,yCAoC4B,QApC5B,EAoC4C;AACpC,iBAAO,KAAK,SAAL,CAAe,8BAAf,CAA8C,KAAK,YAAL,CAAkB,QAAlB,CAA9C,CAAP;AACH;AAtCL;AAAA;AAAA,qCAwCyB,QAxCzB,EAwCyC;AACjC,iBAAO,KAAK,QAAL,GAAgB,QAAhB,GAA2B,KAAK,eAAvC;AACH;AA1CL;AAAA;AAAA,qCA4CyB,QA5CzB,EA4CyC;AACjC,iBAAO,KAAK,WAAL,CAAiB,eAAjB,KAAqC,QAA5C;AACH;AA9CL;;AAAA;AAAA,OAAA;;;;cAM4C,sEAAA,CAAA,4BAAA;;cACF,sDAAA,CAAA,cAAA;;;;AAP7B,IAAA,sBAAsB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADlC,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EACkC,E,uEAMS,sEAAA,CAAA,4BAAA,C,EACF,sDAAA,CAAA,cAAA,C,EAPP,CAAA,EAAtB,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFb,QAAa,oBAAb;AAEI,oCAAoB,mBAApB,EAA+D;AAAA;;AAA3C,aAAA,mBAAA,GAAA,mBAAA;AAA+C;;AAFvE;AAAA;AAAA,gCAImB,KAJnB,EAIkD,KAJlD,EAI4E;AACpE,cAAM,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,IAAnB,CAAf;AACA,iBAAO,KAAK,mBAAL,CAAyB,gBAAzB,CAA0C,MAA1C,EACF,IADE,CAEC,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAK,CAAL,CAFD,CAAP;AAIH;AAVL;;AAAA;AAAA,OAAA;;;;cAE6C,mDAAA,CAAA,wBAAA;;;;AAFhC,IAAA,oBAAoB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADhC,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EACgC,E,uEAEY,mDAAA,CAAA,wBAAA,C,EAFZ,CAAA,EAApB,oBAAoB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRb,QAAY,qBAAZ;;AAAA,KAAA,UAAY,qBAAZ,EAAiC;AAC7B,MAAA,qBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,MAAA,qBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACH,KAHD,EAAY,qBAAqB,KAArB,qBAAqB,GAAA,EAAA,CAAjC","sourcesContent":["export default \"<h1 mat-dialog-title>Отлично</h1>\\n<div class=\\\"spq-finish-action-popup__inner\\\">\\n    <div class=\\\"spq-finish-action-popup__caption\\\">\\n        Вы успешно ответили на вопрос!\\n    </div>\\n        <mat-dialog-actions class=\\\"spq-finish-action-popup__buttons\\\"\\n                            align=\\\"end\\\">\\n            <button mat-button\\n                    [mat-dialog-close]=\\\"_actionsPopupResult.BACK\\\">\\n                Назад к списку\\n            </button>\\n            <button *ngIf=\\\"!_nextDisable\\\"\\n                    mat-button\\n                    color=\\\"primary\\\"\\n                    [mat-dialog-close]=\\\"_actionsPopupResult.NEXT\\\"\\n                    cdkFocusInitial>\\n                Продолжить\\n            </button>\\n        </mat-dialog-actions>\\n</div>\\n\"","export default \"<h1 mat-dialog-title>Подсказка</h1>\\n<div class=\\\"spq-hint-popup__inner\\\">\\n    <div class=\\\"spq-hint-popup__hint\\\">\\n        {{_hint}}\\n    </div>\\n    <mat-dialog-actions class=\\\"spq-hint-popup__button\\\"\\n                        align=\\\"end\\\">\\n        <button mat-button\\n                [mat-dialog-close]=\\\"true\\\"\\n                cdkFocusInitial>\\n            Ок\\n        </button>\\n    </mat-dialog-actions>\\n</div>\\n\"","export default \"<div class=\\\"spq-qd-answer__inner\\\">\\n    <div class=\\\"spq-qd-answer__bar\\\">\\n        <div class=\\\"spq-qd-answer__bar-attempts\\\">\\n            <svg *ngFor=\\\"let attempt of _attemptsModel; trackBy: _trackByAttemptSpentFn\\\">\\n                <ng-template [ngTemplateOutlet]=\\\"attempt.attemptSpent ? spentTemplate : noSpentTemplate\\\">\\n                </ng-template>\\n                <ng-template #noSpentTemplate>\\n                    <use xlink:href=\\\"#icon-rocket\\\"/>\\n                </ng-template>\\n                <ng-template #spentTemplate>\\n                    <use xlink:href=\\\"#icon-non-color-rocket\\\"/>\\n                </ng-template>\\n            </svg>\\n        </div>\\n        <div class=\\\"spq-qd-answer__bar-hints\\\"\\n             *ngFor=\\\"let used of _tooltipArray; index as i\\\"\\n             [matTooltip]=\\\"!used ? 'Вы можете воспользоваться этой подсказкой' : 'Вы уже использовали эту подсказку'\\\"\\n             [matTooltipPosition]=\\\"'after'\\\"\\n             (click)=\\\"_onHintsClick(i)\\\">\\n            <svg width=\\\"28px\\\" height=\\\"28px\\\">\\n                <use *ngIf=\\\"!used; else usedHintsTemplate\\\"\\n                     xlink:href=\\\"#icon-lamp\\\"/>\\n                <ng-template #usedHintsTemplate>\\n                    <use xlink:href=\\\"#icon-simple-lamp\\\"/>\\n                </ng-template>\\n            </svg>\\n        </div>\\n    </div>\\n    <div class=\\\"spq-qd-answer__answer\\\">\\n        <form class=\\\"spq-qd-answer__form\\\"\\n              [formGroup]=\\\"_answerFormGroupModel\\\"\\n              (ngSubmit)=\\\"_onSubmitClick(input.value)\\\">\\n            <div class=\\\"_input\\\">\\n                <mat-form-field appearance=\\\"outline\\\">\\n                    <mat-label>Ваш ответ</mat-label>\\n                    <input #input\\n                           formControlName=\\\"answerInput\\\"\\n                           matInput\\n                           placeholder=\\\"Ответ\\\">\\n                    <mat-hint *ngIf=\\\"_failureAnswer\\\">Попробуйте еще раз</mat-hint>\\n                </mat-form-field>\\n            </div>\\n            <button class=\\\"_button\\\"\\n                    type=\\\"submit\\\"\\n                    mat-raised-button color=\\\"primary\\\"\\n                    [disabled]=\\\"_localLoading || _answerFormGroupModel.invalid || !_answerFormGroupModel.dirty\\\">\\n                Отправить\\n            </button>\\n        </form>\\n    </div>\\n</div>\\n\"","export default \"<div class=\\\"spq-qd-question__inner\\\">\\n    <div class=\\\"spq-qd-question__content\\\"\\n         *ngIf=\\\"_safeUrl && _taskType\\\"\\n         [ngSwitch]=\\\"_taskType\\\">\\n        <iframe class=\\\"spq-qd-question__content-video\\\"\\n                *ngSwitchCase=\\\"_questUrlType.VIDEO\\\"\\n                [src]=\\\"_safeUrl\\\"\\n                frameborder=\\\"0\\\"\\n                allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\">\\n        </iframe>\\n        <img class=\\\"spq-qd-question__content-picture\\\"\\n             *ngSwitchCase=\\\"_questUrlType.PICTURE\\\"\\n             [src]=\\\"_safeUrl\\\"\\n             importance=\\\"high\\\"\\n             alt=\\\"Question Picture\\\">\\n    </div>\\n    <div class=\\\"spq-qd-question__question\\\">\\n        <div class=\\\"spq-qd-question__question-caption\\\">\\n            {{questTask.text}}\\n        </div>\\n    </div>\\n</div>\\n\"","export default \"<div class=\\\"spq-quest-details__inner\\\">\\n    <div class=\\\"spq-quest-details__header\\\">\\n        <div class=\\\"spq-quest-details__header-caption\\\">\\n            {{_questTask?.title}}\\n        </div>\\n        <div class=\\\"spq-quest-details__header-actions\\\">\\n            <button mat-stroked-button\\n                    (click)=\\\"_onBackClick()\\\">\\n                Назад\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"spq-quest-details__wrapper\\\">\\n        <spq-qd-question [questTask]=\\\"_questTask\\\">\\n        </spq-qd-question>\\n        <spq-qd-answer [questTask]=\\\"_questTask\\\">\\n        </spq-qd-answer>\\n    </div>\\n</div>\\n\"","import {Component, HostBinding, Inject} from \"@angular/core\";\nimport {MAT_DIALOG_DATA} from \"@angular/material\";\nimport {SPQActionsPopupResult} from \"../../types/actions-popup-result\";\n\n@Component({\n    selector: \"spq-finish-action-popup\",\n    templateUrl: \"finish-action-popup.component.html\",\n})\nexport class SPQFinishActionPopupComponent {\n\n    public _actionsPopupResult = SPQActionsPopupResult;\n\n    public _nextDisable: boolean;\n\n    @HostBinding(\"class.spq-finish-action-popup\")\n    private hostClass: boolean = true;\n\n    constructor(@Inject(MAT_DIALOG_DATA) nextQuestDetailsExist: boolean) {\n        this._nextDisable = !nextQuestDetailsExist;\n    }\n}\n","import {Component, HostBinding, Inject} from \"@angular/core\";\nimport {MAT_DIALOG_DATA} from \"@angular/material\";\n\n@Component({\n    selector: \"spq-hint-popup\",\n    templateUrl: \"hint-popup.component.html\",\n})\nexport class SPQHintPopupComponent {\n\n    public _hint: string = \"\";\n\n    @HostBinding(\"class.spq-hint-popup\")\n    private hostClass: boolean = true;\n\n    constructor(@Inject(MAT_DIALOG_DATA) hint: string) {\n        this._hint = hint;\n    }\n}\n","import {Component, HostBinding, Input, OnChanges, OnDestroy, SimpleChanges} from \"@angular/core\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {MatDialog} from \"@angular/material\";\nimport {finalize, take, tap} from \"rxjs/operators\";\nimport {ID} from \"../../../core/base.types\";\nimport {SPQQuestTask} from \"../../../core/models/quest-task.type\";\nimport {SPQQuestDetailsNavigationService} from \"../services/qd-navigation-helper.service\";\nimport {SPQQuestDetailsService} from \"../services/quest-details.service\";\nimport {SPQActionsPopupResult} from \"../types/actions-popup-result\";\nimport {SPQFinishActionPopupComponent} from \"./embed/finish-action-popup.component\";\nimport {SPQHintPopupComponent} from \"./embed/hint-popup.component\";\n\n@Component({\n    selector: \"spq-qd-answer\",\n    templateUrl: \"qd-answer.component.html\",\n    providers: [\n        MatDialog\n    ]\n})\nexport class SPQQuestDetailsAnswerComponent implements OnChanges, OnDestroy {\n\n    public _hintsUsed: boolean = false;\n\n    public _failureAnswer: boolean = false;\n\n    public _attemptsModel = [\n        {\n            attemptSpent: false\n        },\n        {\n            attemptSpent: false\n        },\n        {\n            attemptSpent: false\n        }\n    ];\n\n    public _localLoading: boolean = false;\n\n    public _answerFormGroupModel: FormGroup;\n\n    public _tooltipArray: boolean[] = [];\n\n    @Input()\n    public questTask: SPQQuestTask;\n\n    private nextTaskId: ID = \"\";\n\n    @HostBinding(\"class.spq-qd-answer\")\n    private hostClass: boolean = true;\n\n    constructor(private dialogService: MatDialog,\n                private questDetailsService: SPQQuestDetailsService,\n                private navigationService: SPQQuestDetailsNavigationService) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"questTask\"]) {\n            this.initAnswerForm();\n            this.subscribeToGetTooltipsCount();\n        }\n    }\n\n    public s() {\n        this.initAnswerForm();\n        this.subscribeToGetTooltipsCount();\n    }\n\n    public _onSubmitClick(answer: string): void {\n        this.subscribeToCheckAnswer(answer);\n    }\n\n    public _onHintsClick(count: number) {\n        if (!this._tooltipArray[count]) {\n            this._tooltipArray[count] = true;\n            this.openHintsDialog(count);\n        }\n    }\n\n    public _trackByAttemptSpentFn(index: number, attempt): string {\n        return \"\" + index + attempt.attemptSpent.toString();\n    }\n\n    public ngOnDestroy() {\n        // this.subscription.forEach(el => el.unsubscribe());\n    }\n\n    private initAnswerForm(): void {\n        this._answerFormGroupModel = new FormGroup({\n            answerInput: new FormControl(\"\", [Validators.required, Validators.min(1)])\n        });\n    }\n\n    private subscribeToGetTooltipsCount(): void {\n        this.questDetailsService.getQuestTooltipCountByLvl(this.questTask.uuid)\n            .pipe(\n                take(1),\n                tap(count => {\n                    this._tooltipArray = new Array(count).fill(false);\n                })\n            )\n            .subscribe();\n    }\n\n    private updateAttemptsModel(): void {\n        this._attemptsModel.pop();\n        this._attemptsModel.unshift({\n            attemptSpent: true\n        });\n    }\n\n    private subscribeToCheckAnswer(answer: string): void {\n        this._localLoading = true;\n        this.questDetailsService.setQuestAnswer(this.questTask.uuid, answer)\n            .pipe(\n                take(1),\n                tap(response => {\n                    this._failureAnswer = !response.isPassed;\n                    if (this._failureAnswer) {\n                        this.updateAttemptsModel();\n                        this.setAnswerFormError();\n                    } else {\n                        this.nextTaskId = response.currentTaskId;\n                        this.clearField();\n                        this.openFinishDialogAndSubscribeToClose(!response.isAllPassed && !!response.currentTaskId);\n                    }\n                }),\n                finalize(() => {\n                    this._localLoading = false;\n                })\n            )\n            .subscribe();\n    }\n\n    private setAnswerFormError(): void {\n        this._answerFormGroupModel.controls[\"answerInput\"].setErrors({ [\"answerError\"]: \"Ответ не верный\" });\n    }\n\n    private clearField(): void {\n        this._answerFormGroupModel.patchValue({\n            answerInput: \"\"\n        }, {\n            emitEvent: false\n        });\n    }\n\n    private openFinishDialogAndSubscribeToClose(hasNext: boolean): void {\n        this.dialogService.open<SPQFinishActionPopupComponent, boolean, SPQActionsPopupResult>(SPQFinishActionPopupComponent, {\n            data: hasNext\n        })\n            .afterClosed()\n            .pipe(\n                take(1),\n                tap(result => this.navigateFromPopupResult(result))\n            )\n            .subscribe();\n    }\n\n    private openHintsDialog(lvl: number): void {\n        this.questDetailsService.getQuestTooltipByLvl(this.questTask.uuid, lvl + 1)\n            .pipe(\n                take(1),\n                tap(hints => {\n                    this.dialogService.open(SPQHintPopupComponent, { data: hints.text });\n                })\n            )\n            .subscribe();\n    }\n\n    private navigateFromPopupResult(result: SPQActionsPopupResult): void {\n        switch (result) {\n            case SPQActionsPopupResult.BACK:\n                this.navigationService.navigateToQuestFlow();\n                break;\n            case SPQActionsPopupResult.NEXT:\n                this.nextTaskId\n                    ? this.navigationService.navigateToNextQuestDetails(this.nextTaskId)\n                    : this.navigationService.navigateToQuestFlow();\n                break;\n            default:\n                throw new Error(\"Unknown value of SPQActionsPopupResult\");\n        }\n    }\n}\n","import {Component, HostBinding, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {SafeUrl} from \"@angular/platform-browser\";\nimport {SPQQuestTask} from \"../../../core/models/quest-task.type\";\nimport {SPQQuestDetailsService} from \"../services/quest-details.service\";\n\nexport enum SPQQuestTaskUrlType {\n    VIDEO = \"video\",\n    PICTURE = \"picture\"\n}\n\n\n@Component({\n    selector: \"spq-qd-question\",\n    templateUrl: \"qd-question.component.html\",\n})\nexport class SPQQuestDetailsQuestionComponent implements OnChanges {\n\n    public _safeUrl: SafeUrl;\n\n    public _questUrlType = SPQQuestTaskUrlType;\n\n    public _taskType: SPQQuestTaskUrlType;\n\n    @Input()\n    public questTask: SPQQuestTask;\n\n    @HostBinding(\"class.spq-qd-question\")\n    private hostClass: boolean = true;\n\n    constructor(private questDetailsService: SPQQuestDetailsService) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"questTask\"]) {\n            this.setTaskType();\n            this.makeSafeUrl();\n        }\n    }\n\n    private setTaskType(): void {\n        this._taskType = this.questTask.url\n            ?  this.questTask.url.includes(\".\")\n                ? SPQQuestTaskUrlType.PICTURE\n                : SPQQuestTaskUrlType.VIDEO\n            : null;\n    }\n\n    private makeSafeUrl(): void {\n        switch (this._taskType) {\n            case SPQQuestTaskUrlType.PICTURE:\n                this._safeUrl = this.questDetailsService.makeSafeImageUrl(this.questTask.url);\n                break;\n            case SPQQuestTaskUrlType.VIDEO:\n                this._safeUrl = this.questDetailsService.makeSafeVideoUrl(this.questTask.url);\n                break;\n        }\n    }\n}\n","import {Component, HostBinding, OnInit} from \"@angular/core\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {map, tap} from \"rxjs/operators\";\nimport {SPQQuestTask} from \"../../core/models/quest-task.type\";\nimport {SPQQuestDetailsNavigationService} from \"./services/qd-navigation-helper.service\";\n\n@Component({\n    selector: \"spq-quest-details\",\n    templateUrl: \"quest-details.component.html\",\n    providers: [\n        SPQQuestDetailsNavigationService\n    ]\n})\nexport class SPQQuestDetailsComponent implements OnInit {\n\n    public _questTask: SPQQuestTask;\n\n    @HostBinding(\"class.spq-quest-details\")\n    private hostClass: boolean = true;\n\n    constructor(private route: ActivatedRoute,\n                private navigationService: SPQQuestDetailsNavigationService) {\n        this.subscribeToGetQuestTask();\n    }\n\n    public ngOnInit() {}\n\n    public _onBackClick(): void {\n        this.navigationService.back();\n    }\n\n    private subscribeToGetQuestTask(): void {\n        this.route.data\n            .pipe(\n                map((data: { questTask: SPQQuestTask }) => {\n                    return data.questTask;\n                }),\n                tap(task => {\n                    this._questTask = task;\n                })\n            )\n            .subscribe();\n    }\n}\n","import {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButtonModule, MatDialogModule, MatInputModule, MatTabsModule, MatTooltipModule} from \"@angular/material\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {SPQQuestDetailsDataService} from \"../../services/data/quest-details-data.service\";\nimport {SPQFinishActionPopupComponent} from \"./components/embed/finish-action-popup.component\";\nimport {SPQHintPopupComponent} from \"./components/embed/hint-popup.component\";\nimport {SPQQuestDetailsAnswerComponent} from \"./components/qd-answer.component\";\nimport {SPQQuestDetailsQuestionComponent} from \"./components/qd-question.component\";\nimport {SPQQuestDetailsComponent} from \"./quest-details.component\";\nimport {SPQQuestDetailsService} from \"./services/quest-details.service\";\nimport {SPQQuestTaskResolver} from \"./services/quest-task.resolver\";\n\nconst QuestDetailsRoutes: Routes = [\n    {\n        path: \"\",\n        component: SPQQuestDetailsComponent,\n        resolve: {\n            questTask: SPQQuestTaskResolver\n        }\n    }\n];\n\nconst matModules: Array<Type<any>> = [\n    MatDialogModule,\n    MatButtonModule,\n    MatTabsModule,\n    MatInputModule,\n    MatTooltipModule\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(QuestDetailsRoutes),\n        ReactiveFormsModule,\n        ...matModules\n    ],\n    declarations: [\n        SPQQuestDetailsComponent,\n        SPQQuestDetailsQuestionComponent,\n        SPQQuestDetailsAnswerComponent,\n        SPQFinishActionPopupComponent,\n        SPQHintPopupComponent\n    ],\n    entryComponents: [\n        SPQFinishActionPopupComponent,\n        SPQHintPopupComponent\n    ],\n    exports: [\n        SPQQuestDetailsComponent\n    ],\n    providers: [\n        SPQQuestDetailsDataService,\n        SPQQuestDetailsService,\n        SPQQuestTaskResolver\n    ]\n})\nexport class SPQQuestDetailsModule {\n}\n","import {Injectable} from \"@angular/core\";\nimport {SPQRoutesMap, SPQRoutesString} from \"../../../app-routers\";\nimport {ID} from \"../../../core/base.types\";\nimport {SPQNavigationService} from \"../../../services/navigation.service\";\nimport {SPQQuestDetailsService} from \"./quest-details.service\";\n\n@Injectable()\nexport class SPQQuestDetailsNavigationService {\n\n    constructor(private navigationService: SPQNavigationService,\n                private questDetailsService: SPQQuestDetailsService) {\n    }\n\n    public navigateToQuestFlow(): void {\n        this.navigationService.navigateTo(SPQRoutesMap[SPQRoutesString.SPQ_QUEST]);\n    }\n\n    public navigateToNextQuestDetails(nextTaskId: ID): void {\n        this.navigationService.navigateTo(SPQRoutesMap[SPQRoutesString.SPQ_QUEST] + \"/\" + nextTaskId);\n    }\n\n    public back(): void {\n        this.navigationService.back();\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {DomSanitizer, SafeResourceUrl} from \"@angular/platform-browser\";\nimport {Observable} from \"rxjs\";\nimport {ID} from \"../../../core/base.types\";\nimport {SPQQuestTask} from \"../../../core/models/quest-task.type\";\nimport {SPQQuestDetailsDataService} from \"../../../services/data/quest-details-data.service\";\nimport {SPQQuestAnswerResponse} from \"../types/quest-answer.type\";\nimport {SPQQuestTooltip} from \"../types/quest-tooltip.type\";\n\n@Injectable()\nexport class SPQQuestDetailsService {\n\n    private readonly videoUrl: string = \"https://www.youtube.com/embed/\";\n\n    private readonly videoEndPartUrl: string = \"?loop=1&modestbranding=1&color=white\";\n\n    public constructor(private dataService: SPQQuestDetailsDataService,\n                       private sanitizer: DomSanitizer) {\n    }\n\n    public getQuestTooltipByLvl(taskId: ID, lvl: number): Observable<SPQQuestTooltip> {\n        return this.dataService.getQuestTooltipByLvl({\n            taskUUID: taskId,\n            lvl: lvl\n        });\n    }\n\n    public getQuestTooltipCountByLvl(taskId: ID): Observable<number> {\n        return this.dataService.getQuestTooltipCountByLvl(taskId);\n    }\n\n    public setQuestAnswer(taskId: ID, answer: string): Observable<SPQQuestAnswerResponse> {\n        return this.dataService.setQuestAnswer({\n            taskUUID: taskId,\n            answer: answer\n        });\n    }\n\n    public getQuestTaskById(taskId: ID): Observable<SPQQuestTask> {\n        return this.dataService.getQuestTaskById(taskId);\n    }\n\n    public makeSafeImageUrl(imageUrl): SafeResourceUrl {\n        return this.sanitizer.bypassSecurityTrustResourceUrl(this.makeImageUrl(imageUrl));\n    }\n\n    public makeSafeVideoUrl(videoUrl: string): SafeResourceUrl {\n        return this.sanitizer.bypassSecurityTrustResourceUrl(this.makeVideoUrl(videoUrl));\n    }\n\n    private makeVideoUrl(videoUrl: string): string {\n        return this.videoUrl + videoUrl + this.videoEndPartUrl;\n    }\n\n    private makeImageUrl(imageUrl: string): string {\n        return this.dataService.getResourcesUrl() + imageUrl;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {take} from \"rxjs/operators\";\nimport {SPQQuestTask} from \"../../../core/models/quest-task.type\";\nimport {SPQQuestDetailsService} from \"./quest-details.service\";\n\n@Injectable()\nexport class SPQQuestTaskResolver implements Resolve<SPQQuestTask> {\n\n    constructor(private questDetailsService: SPQQuestDetailsService) {}\n\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<SPQQuestTask> | Promise<SPQQuestTask> | SPQQuestTask {\n        const taskId = route.paramMap.get(\"id\");\n        return this.questDetailsService.getQuestTaskById(taskId)\n            .pipe(\n                take(1),\n            );\n    }\n}\n","export enum SPQActionsPopupResult {\n    NEXT = \"next\",\n    BACK = \"back\"\n}\n"],"sourceRoot":"webpack:///","file":"quest-details-quest-details-module-es5.js"}