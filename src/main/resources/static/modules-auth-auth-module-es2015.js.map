{"version":3,"sources":["./src/app/modules/auth/auth.component.html","./src/app/modules/auth/auth.component.ts","./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/services/auth.service.ts","./src/app/services/data/auth-data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,u6CAAw2C,mBAAmB,uMAAuM,eAAe,+1EAA+1E,sBAAsB,4hB;;;;;;;;;;;;;;;;;;;;;;;ACAx5H;AACkB;AACpD;AAC8B;AACF;AACgB;AAChB;AAEvD,yBAAyB;AAQzB,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAezB,YAAoB,WAA2B,EAC3B,iBAAuC;QADvC,gBAAW,GAAX,WAAW,CAAgB;QAC3B,sBAAiB,GAAjB,iBAAiB,CAAsB;QAdpD,aAAQ,GAAY,KAAK,CAAC;QAI1B,kBAAa,GAAW,EAAE,CAAC;QAI3B,yBAAoB,GAAW,EAAE,CAAC;QAGjC,cAAS,GAAY,IAAI,CAAC;IAIlC,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACrC,CAAC;IAEM,oBAAoB;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC;YACjC,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5C,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC;YAClD,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5C,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,WAAW,CAAC;SACvD,CAAC;aACG,IAAI,CACD,0DAAG,CACC,CAAC,QAAQ,EAAE,EAAE;YACT,IAAI,CAAC,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;YAC5D,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,iEAAoB,CAAC,CAAC;QAC5D,CAAC,EACD,GAAG,EAAE;YACD,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;gBAC7B,QAAQ,EAAE,OAAO;aACpB,CAAC,CAAC;QACP,CAAC,CACJ,EACD,iEAAU,CAAC,GAAG,CAAC,EAAE;YACb,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5C,OAAO,0CAAK,CAAC;QACjB,CAAC,CAAC,EACF,+DAAQ,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC1B,CAAC,CAAC,CACL;aACA,SAAS,EAAE,CAAC;IACrB,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC;YACnC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC;YACrC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC;SAC9C,CAAC;aACG,IAAI,CACD,iEAAU,CAAC,GAAG,CAAC,EAAE;YACb,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;YACrC,OAAO,0CAAK,CAAC;QACjB,CAAC,CAAC,EACF,+DAAQ,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC1B,CAAC,CAAC,CACL;aACA,SAAS,CACN,CAAC,QAAQ,EAAE,EAAE;YACT,IAAI,CAAC,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;YAC5D,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAClC,CAAC,EACD,GAAG,EAAE;YACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;gBACtB,QAAQ,EAAE,OAAO;aACpB,CAAC,CAAC;QACP,CAAC,CACJ,CAAC;IACV,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,UAAU,GAAG,IAAI,wDAAS,CAAC;YAC5B,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACzD,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAC/D,CAAC,CAAC;IACP,CAAC;IAEO,sBAAsB;QAC1B,IAAI,CAAC,iBAAiB,GAAG,IAAI,wDAAS,CAAC;YACnC,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACzD,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,sBAAsB,EAAE,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YAChF,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAC/D,CAAC,CAAC;IACP,CAAC;IAEO,yBAAyB;QAC7B,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;aAC5B,SAAS,EAAE,CAAC;IACrB,CAAC;IAEO,sBAAsB;QAC1B,OAAO,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAEM,eAAe;QAClB,OAAO,8BAA8B,CAAC;IAC1C,CAAC;CACJ;;YAnGoC,qEAAc;YACR,iFAAoB;;AAH3D;IADC,iEAAW,CAAC,gBAAgB,CAAC;;mDACI;AAbzB,gBAAgB;IAP5B,+DAAS,CAAC;QACP,QAAQ,EAAE,UAAU;QACpB,wNAAkC;QAClC,SAAS,EAAE;YACP,qEAAc;SACjB;KACJ,CAAC;2EAgBmC,qEAAc;QACR,iFAAoB;GAhBlD,gBAAgB,CAkH5B;AAlH4B;;;;;;;;;;;;;;;;;;;;;;;;AChBgB;AACN;AACY;AACyE;AACvE;AACoB;AACvB;AAElD,MAAM,WAAW,GAAW;IACxB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gEAAgB;KAC9B;CACJ,CAAC;AAEF,MAAM,UAAU,GAAe;IAC3B,qEAAkB;IAClB,iEAAc;IACd,gEAAa;IACb,kEAAe;IACf,uEAAoB;CACvB;AAmBD,IAAa,aAAa,GAA1B,MAAa,aAAa;CAAG;AAAhB,aAAa;IAjBzB,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,WAAW,CAAC;YAClC,kEAAmB;YACnB,GAAG,UAAU;SAChB;QACD,YAAY,EAAE;YACV,gEAAgB;SACnB;QACD,OAAO,EAAE;YACL,gEAAgB;SACnB;QACD,SAAS,EAAE;YACP,mFAAkB;SACrB;KACJ,CAAC;GACW,aAAa,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;ACxCe;AACL;AAEwC;AACR;AACW;AAI/E,IAAa,cAAc,GAA3B,MAAa,cAAc;IACvB,YAAoB,WAA+B,EAC/B,YAAoC,EACpC,cAAiC;QAFjC,gBAAW,GAAX,WAAW,CAAoB;QAC/B,iBAAY,GAAZ,YAAY,CAAwB;QACpC,mBAAc,GAAd,cAAc,CAAmB;IACrD,CAAC;IAEM,qBAAqB,CAAC,aAA+B;QACxD,OAAO,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;IACjE,CAAC;IAEM,mBAAmB,CAAC,qBAA+C;QACtE,OAAO,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;IACvE,CAAC;IAEM,cAAc;QACjB,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,EAAE;YAClC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SACpC;QACD,OAAO,+CAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;IAC3C,CAAC;IAEM,gCAAgC,CAAC,QAA4B;QAChE,MAAM,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;IAClD,CAAC;IAEO,wBAAwB,CAAC,QAA4B;QACzD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAEO,uBAAuB,CAAC,QAAiC;QAC7D,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;CACJ;;YApCoC,mFAAkB;YACjB,sFAAsB;YACpB,2EAAiB;;AAH5C,cAAc;IAD1B,gEAAU,EAAE;2EAEwB,mFAAkB;QACjB,sFAAsB;QACpB,2EAAiB;GAH5C,cAAc,CAqC1B;AArC0B;;;;;;;;;;;;;;;;;;;ACTc;AAIc;AAGvD,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,qEAAc;IADtD;;QAGY,aAAQ,GAAG,cAAc,CAAC;QAE1B,cAAS,GAAG,QAAQ,CAAC;QAErB,oBAAe,GAAG,cAAc,CAAC;IAa7C,CAAC;IAXU,qBAAqB,CAAC,aAA+B;QACxD,OAAO,IAAI,CAAC,IAAI,CAAqB,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC,wCAAwC;IAChH,CAAC;IAEM,mBAAmB,CAAC,qBAA+C;QACtE,OAAO,IAAI,CAAC,IAAI,CAAqB,IAAI,CAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;IACtF,CAAC;IAEM,MAAM;QACT,OAAO,IAAI,CAAC,IAAI,CAAO,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC;CACJ;AAnBY,kBAAkB;IAD9B,gEAAU,EAAE;GACA,kBAAkB,CAmB9B;AAnB8B","file":"modules-auth-auth-module-es2015.js","sourcesContent":["export default \"<div class=\\\"spq-auth__inner\\\">\\n    <div class=\\\"spq-auth__inner-form\\\">\\n        <mat-progress-bar *ngIf=\\\"_loading\\\"\\n                          class=\\\"progress-line\\\"\\n                          mode=\\\"indeterminate\\\">\\n        </mat-progress-bar>\\n        <mat-tab-group [dynamicHeight]=\\\"true\\\"\\n                       mat-align-tabs=\\\"center\\\">\\n            <mat-tab label=\\\"Вход\\\">\\n                <form class=\\\"spq-auth__form\\\"\\n                      [formGroup]=\\\"_loginForm\\\"\\n                      (ngSubmit)=\\\"onValidLoginClick()\\\">\\n                    <mat-form-field appearance=\\\"outline\\\"\\n                                    [hideRequiredMarker]=\\\"false\\\">\\n                        <mat-label>Логин</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Введите ваш логин\\\"\\n                               formControlName=\\\"login\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Пароль</mat-label>\\n                        <input type=\\\"password\\\"\\n                               placeholder=\\\"Введите ваш пароль\\\"\\n                               formControlName=\\\"password\\\"\\n                               matInput>\\n                        <mat-error *ngIf=\\\"_loginForm.invalid\\\">{{getErrorMessage()}}</mat-error>\\n                    </mat-form-field>\\n                    <mat-error class=\\\"spq-auth__form-error\\\"\\n                               *ngIf=\\\"_loginMessage\\\">\\n                        {{_loginMessage}}\\n                    </mat-error>\\n                    <button class=\\\"spq-auth__form-submit\\\"\\n                            mat-button\\n                            color=\\\"accent\\\"\\n                            type=\\\"submit\\\"\\n                            mat-raised-button\\n                            [disabled]=\\\"!_loginForm.valid || _loading\\\">\\n                        Войти\\n                    </button>\\n                </form>\\n            </mat-tab>\\n            <mat-tab label=\\\"Регистрация\\\">\\n                <form class=\\\"spq-auth__form\\\"\\n                      [formGroup]=\\\"_registrationForm\\\"\\n                      (ngSubmit)=\\\"onValidRegisterClick()\\\">\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Ваше Имя</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Имя\\\"\\n                               formControlName=\\\"firstName\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Email</mat-label>\\n                        <input type=\\\"email\\\"\\n                               placeholder=\\\"Введите ваш Email\\\"\\n                               formControlName=\\\"email\\\"\\n                               matInput>\\n                        <mat-error *ngIf=\\\"_registrationForm.controls.email.invalid\\\">Некорректный Email</mat-error>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Логин</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Логин\\\"\\n                               formControlName=\\\"login\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Пароль</mat-label>\\n                        <input type=\\\"password\\\"\\n                               placeholder=\\\"Введите ваш пароль\\\"\\n                               formControlName=\\\"password\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-error class=\\\"spq-auth__form-error\\\"\\n                               *ngIf=\\\"_registrationMessage\\\">\\n                        {{_registrationMessage}}\\n                    </mat-error>\\n                    <button class=\\\"spq-auth__form-submit\\\"\\n                            mat-button\\n                            color=\\\"accent\\\"\\n                            mat-raised-button\\n                            [formAction]=\\\"'submit'\\\"\\n                            [disabled]=\\\"!_registrationForm.valid || _loading\\\">\\n                        Зарегистрироваться\\n                    </button>\\n                </form>\\n            </mat-tab>\\n        </mat-tab-group>\\n\\n    </div>\\n</div>\\n\"","import {Component, HostBinding, OnInit} from \"@angular/core\";\nimport {FormControl, FormGroup, ValidatorFn, Validators} from \"@angular/forms\";\nimport {EMPTY} from \"rxjs\";\nimport {catchError, finalize, tap} from \"rxjs/operators\";\nimport {defaultAbsoluteRoute} from \"../../app-routers\";\nimport {SPQNavigationService} from \"../../services/navigation.service\";\nimport {SPQAuthService} from \"./services/auth.service\";\n\n// TODO: big refactoring!\n@Component({\n    selector: \"spq-auth\",\n    templateUrl: \"auth.component.html\",\n    providers: [\n        SPQAuthService\n    ]\n})\nexport class SPQAuthComponent implements OnInit {\n\n    public _loading: boolean = false;\n\n    public _loginForm: FormGroup;\n\n    public _loginMessage: string = \"\";\n\n    public _registrationForm: FormGroup;\n\n    public _registrationMessage: string = \"\";\n\n    @HostBinding(\"class.spq-auth\")\n    private hostClass: boolean = true;\n\n    constructor(private authService: SPQAuthService,\n                private navigationService: SPQNavigationService) {\n    }\n\n    public ngOnInit() {\n        this.createLoginForm();\n        this.createRegistrationForm();\n        this.subscribeToLogoutIfLogged();\n    }\n\n    public onValidRegisterClick(): void {\n        this._loading = true;\n        this._registrationMessage = \"\";\n        this.authService.attemptRegistration({\n            login: this._registrationForm.value[\"login\"],\n            password: this._registrationForm.value[\"password\"],\n            email: this._registrationForm.value[\"email\"],\n            firstName: this._registrationForm.value[\"firstName\"],\n        })\n            .pipe(\n                tap(\n                    (response) => {\n                        this.authService.decodeResponseTokenAndSetToStore(response);\n                        this.navigationService.navigateTo(defaultAbsoluteRoute);\n                    },\n                    () => {\n                        this._registrationForm.setErrors({\n                            password: \"Error\"\n                        });\n                    }\n                ),\n                catchError(err => {\n                    this._registrationMessage = err.error.error;\n                    return EMPTY;\n                }),\n                finalize(() => {\n                    this._loading = false;\n                })\n            )\n            .subscribe();\n    }\n\n    public onValidLoginClick(): void {\n        this._loading = true;\n        this._loginMessage = \"\";\n        this.authService.attemptAuthentication({\n            login: this._loginForm.value[\"login\"],\n            password: this._loginForm.value[\"password\"],\n        })\n            .pipe(\n                catchError(err => {\n                    this._loginMessage = err.error.error;\n                    return EMPTY;\n                }),\n                finalize(() => {\n                    this._loading = false;\n                })\n            )\n            .subscribe(\n                (response) => {\n                    this.authService.decodeResponseTokenAndSetToStore(response);\n                    this.navigationService.back();\n                },\n                () => {\n                    this._loginForm.setErrors({\n                        password: \"Error\"\n                    });\n                }\n            );\n    }\n\n    private createLoginForm(): void {\n        this._loginForm = new FormGroup({\n            login: new FormControl(\"\", this.getValidatorsForFields()),\n            password: new FormControl(\"\", this.getValidatorsForFields()),\n        });\n    }\n\n    private createRegistrationForm(): void {\n        this._registrationForm = new FormGroup({\n            firstName: new FormControl(\"\", [Validators.required, Validators.min(2)]),\n            login: new FormControl(\"\", this.getValidatorsForFields()),\n            email: new FormControl(\"\", [...this.getValidatorsForFields(), Validators.email]),\n            password: new FormControl(\"\", this.getValidatorsForFields()),\n        });\n    }\n\n    private subscribeToLogoutIfLogged(): void {\n        this.authService.logoutIfLogged()\n            .subscribe();\n    }\n\n    private getValidatorsForFields(): ValidatorFn[] {\n        return [Validators.required, Validators.min(5)];\n    }\n\n    public getErrorMessage(): string {\n        return \"Введены некорректные данные!\";\n    }\n}\n","import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButtonModule, MatFormFieldModule, MatInputModule, MatProgressBarModule, MatTabsModule} from \"@angular/material/\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {SPQAuthDataService} from \"../../services/data/auth-data.service\";\nimport {SPQAuthComponent} from \"./auth.component\";\n\nconst authRouters: Routes = [\n    {\n        path: \"\",\n        component: SPQAuthComponent\n    }\n];\n\nconst matModules: Array<any> = [\n    MatFormFieldModule,\n    MatInputModule,\n    MatTabsModule,\n    MatButtonModule,\n    MatProgressBarModule\n]\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(authRouters),\n        ReactiveFormsModule,\n        ...matModules\n    ],\n    declarations: [\n        SPQAuthComponent\n    ],\n    exports: [\n        SPQAuthComponent\n    ],\n    providers: [\n        SPQAuthDataService\n    ]\n})\nexport class SPQAuthModule {}\n","import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SPADecodedResponseModel, SPAEncodedResponse} from \"../../../core/security/types/response.type\";\nimport {SPQAuthDataService} from \"../../../services/data/auth-data.service\";\nimport {SPQStorageService} from \"../../../services/storage.service\";\nimport {SPATokenDecoderService} from \"../../../services/token-decoder.service\";\nimport {SPQAuthDataModel, SPQRegistrationDataModel} from \"../types/auth.type\";\n\n@Injectable()\nexport class SPQAuthService {\n    constructor(private dataService: SPQAuthDataService,\n                private tokenDecoder: SPATokenDecoderService,\n                private storageService: SPQStorageService) {\n    }\n\n    public attemptAuthentication(authDataModel: SPQAuthDataModel): Observable<SPAEncodedResponse> {\n        return this.dataService.attemptAuthentication(authDataModel);\n    }\n\n    public attemptRegistration(registrationDataModel: SPQRegistrationDataModel): Observable<SPAEncodedResponse> {\n        return this.dataService.attemptRegistration(registrationDataModel);\n    }\n\n    public logoutIfLogged(): Observable<void> {\n        if (this.storageService.isLoggedIn()) {\n            this.storageService.goOut();\n            return this.dataService.logout();\n        }\n        return of(this.storageService.goOut());\n    }\n\n    public decodeResponseTokenAndSetToStore(response: SPAEncodedResponse): void {\n        const decodedResponse = this.makeDecodedResponseModel(response);\n        this.setResponseModelToStore(decodedResponse);\n    }\n\n    private makeDecodedResponseModel(response: SPAEncodedResponse): SPADecodedResponseModel {\n        return this.tokenDecoder.decode(response);\n    }\n\n    private setResponseModelToStore(response: SPADecodedResponseModel): void {\n        this.storageService.saveLogin(response.login);\n        this.storageService.saveFirstName(response.firstName);\n        this.storageService.saveToken(response.accessToken);\n        this.storageService.saveRoles(response.roles);\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SPAEncodedResponse} from \"../../core/security/types/response.type\";\nimport {SPQAuthDataModel, SPQRegistrationDataModel} from \"../../modules/auth/types/auth.type\";\nimport {SPQDataService} from \"./abstract-data.service\";\n\n@Injectable()\nexport class SPQAuthDataService extends SPQDataService {\n\n    private loginURL = \"authenticate\";\n\n    private logoutURL = \"logout\";\n\n    private registrationURL = \"registration\";\n\n    public attemptAuthentication(authDataModel: SPQAuthDataModel): Observable<SPAEncodedResponse> {\n        return this.post<SPAEncodedResponse>(this.loginURL, authDataModel); // use { withCredentials: true } in prod\n    }\n\n    public attemptRegistration(registrationDataModel: SPQRegistrationDataModel): Observable<SPAEncodedResponse> {\n        return this.post<SPAEncodedResponse>(this.registrationURL, registrationDataModel);\n    }\n\n    public logout(): Observable<void> {\n        return this.post<void>(this.logoutURL, {});\n    }\n}\n"],"sourceRoot":"webpack:///"}