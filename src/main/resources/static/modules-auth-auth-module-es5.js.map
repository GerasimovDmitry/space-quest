{"version":3,"sources":["src/app/modules/auth/auth.component.html","src/app/modules/auth/auth.component.ts","src/app/modules/auth/auth.module.ts","src/app/modules/auth/services/auth.service.ts","src/app/services/data/auth-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"spq-auth__inner\\\">\\n    <div class=\\\"spq-auth__inner-form\\\">\\n        <mat-progress-bar *ngIf=\\\"_loading\\\"\\n                          class=\\\"progress-line\\\"\\n                          mode=\\\"indeterminate\\\">\\n        </mat-progress-bar>\\n        <mat-tab-group [dynamicHeight]=\\\"true\\\"\\n                       mat-align-tabs=\\\"center\\\">\\n            <mat-tab label=\\\"Вход\\\">\\n                <form class=\\\"spq-auth__form\\\"\\n                      [formGroup]=\\\"_loginForm\\\"\\n                      (ngSubmit)=\\\"onValidLoginClick()\\\">\\n                    <mat-form-field appearance=\\\"outline\\\"\\n                                    [hideRequiredMarker]=\\\"false\\\">\\n                        <mat-label>Логин</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Введите ваш логин\\\"\\n                               formControlName=\\\"login\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Пароль</mat-label>\\n                        <input type=\\\"password\\\"\\n                               placeholder=\\\"Введите ваш пароль\\\"\\n                               formControlName=\\\"password\\\"\\n                               matInput>\\n                        <mat-error *ngIf=\\\"_loginForm.invalid\\\">{{getErrorMessage()}}</mat-error>\\n                    </mat-form-field>\\n                    <mat-error class=\\\"spq-auth__form-error\\\"\\n                               *ngIf=\\\"_loginMessage\\\">\\n                        {{_loginMessage}}\\n                    </mat-error>\\n                    <button class=\\\"spq-auth__form-submit\\\"\\n                            mat-button\\n                            color=\\\"accent\\\"\\n                            type=\\\"submit\\\"\\n                            mat-raised-button\\n                            [disabled]=\\\"!_loginForm.valid || _loading\\\">\\n                        Войти\\n                    </button>\\n                </form>\\n            </mat-tab>\\n            <mat-tab label=\\\"Регистрация\\\">\\n                <form class=\\\"spq-auth__form\\\"\\n                      [formGroup]=\\\"_registrationForm\\\"\\n                      (ngSubmit)=\\\"onValidRegisterClick()\\\">\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Ваше Имя</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Имя\\\"\\n                               formControlName=\\\"firstName\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Email</mat-label>\\n                        <input type=\\\"email\\\"\\n                               placeholder=\\\"Введите ваш Email\\\"\\n                               formControlName=\\\"email\\\"\\n                               matInput>\\n                        <mat-error *ngIf=\\\"_registrationForm.controls.email.invalid\\\">Некорректный Email</mat-error>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Логин</mat-label>\\n                        <input type=\\\"text\\\"\\n                               placeholder=\\\"Логин\\\"\\n                               formControlName=\\\"login\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\">\\n                        <mat-label>Пароль</mat-label>\\n                        <input type=\\\"password\\\"\\n                               placeholder=\\\"Введите ваш пароль\\\"\\n                               formControlName=\\\"password\\\"\\n                               matInput>\\n                    </mat-form-field>\\n                    <mat-error class=\\\"spq-auth__form-error\\\"\\n                               *ngIf=\\\"_registrationMessage\\\">\\n                        {{_registrationMessage}}\\n                    </mat-error>\\n                    <button class=\\\"spq-auth__form-submit\\\"\\n                            mat-button\\n                            color=\\\"accent\\\"\\n                            mat-raised-button\\n                            [formAction]=\\\"'submit'\\\"\\n                            [disabled]=\\\"!_registrationForm.valid || _loading\\\">\\n                        Зарегистрироваться\\n                    </button>\\n                </form>\\n            </mat-tab>\\n        </mat-tab-group>\\n\\n    </div>\\n</div>\\n\"","import {Component, HostBinding, OnInit} from \"@angular/core\";\nimport {FormControl, FormGroup, ValidatorFn, Validators} from \"@angular/forms\";\nimport {EMPTY} from \"rxjs\";\nimport {catchError, finalize, tap} from \"rxjs/operators\";\nimport {defaultAbsoluteRoute} from \"../../app-routers\";\nimport {SPQNavigationService} from \"../../services/navigation.service\";\nimport {SPQAuthService} from \"./services/auth.service\";\n\n// TODO: big refactoring!\n@Component({\n    selector: \"spq-auth\",\n    templateUrl: \"auth.component.html\",\n    providers: [\n        SPQAuthService\n    ]\n})\nexport class SPQAuthComponent implements OnInit {\n\n    public _loading: boolean = false;\n\n    public _loginForm: FormGroup;\n\n    public _loginMessage: string = \"\";\n\n    public _registrationForm: FormGroup;\n\n    public _registrationMessage: string = \"\";\n\n    @HostBinding(\"class.spq-auth\")\n    private hostClass: boolean = true;\n\n    constructor(private authService: SPQAuthService,\n                private navigationService: SPQNavigationService) {\n    }\n\n    public ngOnInit() {\n        this.createLoginForm();\n        this.createRegistrationForm();\n        this.subscribeToLogoutIfLogged();\n    }\n\n    public onValidRegisterClick(): void {\n        this._loading = true;\n        this._registrationMessage = \"\";\n        this.authService.attemptRegistration({\n            login: this._registrationForm.value[\"login\"],\n            password: this._registrationForm.value[\"password\"],\n            email: this._registrationForm.value[\"email\"],\n            firstName: this._registrationForm.value[\"firstName\"],\n        })\n            .pipe(\n                tap(\n                    (response) => {\n                        this.authService.decodeResponseTokenAndSetToStore(response);\n                        this.navigationService.navigateTo(defaultAbsoluteRoute);\n                    },\n                    () => {\n                        this._registrationForm.setErrors({\n                            password: \"Error\"\n                        });\n                    }\n                ),\n                catchError(err => {\n                    this._registrationMessage = err.error.error;\n                    return EMPTY;\n                }),\n                finalize(() => {\n                    this._loading = false;\n                })\n            )\n            .subscribe();\n    }\n\n    public onValidLoginClick(): void {\n        this._loading = true;\n        this._loginMessage = \"\";\n        this.authService.attemptAuthentication({\n            login: this._loginForm.value[\"login\"],\n            password: this._loginForm.value[\"password\"],\n        })\n            .pipe(\n                catchError(err => {\n                    this._loginMessage = err.error.error;\n                    return EMPTY;\n                }),\n                finalize(() => {\n                    this._loading = false;\n                })\n            )\n            .subscribe(\n                (response) => {\n                    this.authService.decodeResponseTokenAndSetToStore(response);\n                    this.navigationService.back();\n                },\n                () => {\n                    this._loginForm.setErrors({\n                        password: \"Error\"\n                    });\n                }\n            );\n    }\n\n    private createLoginForm(): void {\n        this._loginForm = new FormGroup({\n            login: new FormControl(\"\", this.getValidatorsForFields()),\n            password: new FormControl(\"\", this.getValidatorsForFields()),\n        });\n    }\n\n    private createRegistrationForm(): void {\n        this._registrationForm = new FormGroup({\n            firstName: new FormControl(\"\", [Validators.required, Validators.min(2)]),\n            login: new FormControl(\"\", this.getValidatorsForFields()),\n            email: new FormControl(\"\", [...this.getValidatorsForFields(), Validators.email]),\n            password: new FormControl(\"\", this.getValidatorsForFields()),\n        });\n    }\n\n    private subscribeToLogoutIfLogged(): void {\n        this.authService.logoutIfLogged()\n            .subscribe();\n    }\n\n    private getValidatorsForFields(): ValidatorFn[] {\n        return [Validators.required, Validators.min(5)];\n    }\n\n    public getErrorMessage(): string {\n        return \"Введены некорректные данные!\";\n    }\n}\n","import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatButtonModule, MatFormFieldModule, MatInputModule, MatProgressBarModule, MatTabsModule} from \"@angular/material/\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {SPQAuthDataService} from \"../../services/data/auth-data.service\";\nimport {SPQAuthComponent} from \"./auth.component\";\n\nconst authRouters: Routes = [\n    {\n        path: \"\",\n        component: SPQAuthComponent\n    }\n];\n\nconst matModules: Array<any> = [\n    MatFormFieldModule,\n    MatInputModule,\n    MatTabsModule,\n    MatButtonModule,\n    MatProgressBarModule\n]\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(authRouters),\n        ReactiveFormsModule,\n        ...matModules\n    ],\n    declarations: [\n        SPQAuthComponent\n    ],\n    exports: [\n        SPQAuthComponent\n    ],\n    providers: [\n        SPQAuthDataService\n    ]\n})\nexport class SPQAuthModule {}\n","import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\nimport {SPADecodedResponseModel, SPAEncodedResponse} from \"../../../core/security/types/response.type\";\nimport {SPQAuthDataService} from \"../../../services/data/auth-data.service\";\nimport {SPQStorageService} from \"../../../services/storage.service\";\nimport {SPATokenDecoderService} from \"../../../services/token-decoder.service\";\nimport {SPQAuthDataModel, SPQRegistrationDataModel} from \"../types/auth.type\";\n\n@Injectable()\nexport class SPQAuthService {\n    constructor(private dataService: SPQAuthDataService,\n                private tokenDecoder: SPATokenDecoderService,\n                private storageService: SPQStorageService) {\n    }\n\n    public attemptAuthentication(authDataModel: SPQAuthDataModel): Observable<SPAEncodedResponse> {\n        return this.dataService.attemptAuthentication(authDataModel);\n    }\n\n    public attemptRegistration(registrationDataModel: SPQRegistrationDataModel): Observable<SPAEncodedResponse> {\n        return this.dataService.attemptRegistration(registrationDataModel);\n    }\n\n    public logoutIfLogged(): Observable<void> {\n        if (this.storageService.isLoggedIn()) {\n            this.storageService.goOut();\n            return this.dataService.logout();\n        }\n        return of(this.storageService.goOut());\n    }\n\n    public decodeResponseTokenAndSetToStore(response: SPAEncodedResponse): void {\n        const decodedResponse = this.makeDecodedResponseModel(response);\n        this.setResponseModelToStore(decodedResponse);\n    }\n\n    private makeDecodedResponseModel(response: SPAEncodedResponse): SPADecodedResponseModel {\n        return this.tokenDecoder.decode(response);\n    }\n\n    private setResponseModelToStore(response: SPADecodedResponseModel): void {\n        this.storageService.saveLogin(response.login);\n        this.storageService.saveFirstName(response.firstName);\n        this.storageService.saveToken(response.accessToken);\n        this.storageService.saveRoles(response.roles);\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {SPAEncodedResponse} from \"../../core/security/types/response.type\";\nimport {SPQAuthDataModel, SPQRegistrationDataModel} from \"../../modules/auth/types/auth.type\";\nimport {SPQDataService} from \"./abstract-data.service\";\n\n@Injectable()\nexport class SPQAuthDataService extends SPQDataService {\n\n    private loginURL = \"authenticate\";\n\n    private logoutURL = \"logout\";\n\n    private registrationURL = \"registration\";\n\n    public attemptAuthentication(authDataModel: SPQAuthDataModel): Observable<SPAEncodedResponse> {\n        return this.post<SPAEncodedResponse>(this.loginURL, authDataModel); // use { withCredentials: true } in prod\n    }\n\n    public attemptRegistration(registrationDataModel: SPQRegistrationDataModel): Observable<SPAEncodedResponse> {\n        return this.post<SPAEncodedResponse>(this.registrationURL, registrationDataModel);\n    }\n\n    public logout(): Observable<void> {\n        return this.post<void>(this.logoutURL, {});\n    }\n}\n"],"sourceRoot":"webpack:///","file":"modules-auth-auth-module-es5.js"}